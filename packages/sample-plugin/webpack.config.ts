import path from 'path';
import { DynamicRemotePlugin } from '@openshift/dynamic-plugin-sdk-webpack';
import { getSampleAppSharedModules } from '@sample-app/plugin-sdk-addons/shared-modules';
import CSSMinimizerPlugin from 'css-minimizer-webpack-plugin';
import type { Configuration, WebpackPluginInstance } from 'webpack';
import { EnvironmentPlugin } from 'webpack';
import extensions from './plugin-extensions';

const isProd = process.env.NODE_ENV === 'production';

const pathTo = (relativePath: string) => path.resolve(__dirname, relativePath);

const sharedModules = getSampleAppSharedModules({
  import: false,
});

const plugins: WebpackPluginInstance[] = [
  new EnvironmentPlugin({
    NODE_ENV: 'development',
  }),
  new DynamicRemotePlugin({
    extensions,
    sharedModules,
  }),
];

const config: Configuration = {
  mode: isProd ? 'production' : 'development',
  entry: {}, // plugin container entry generated by DynamicRemotePlugin
  output: {
    path: pathTo('dist'),
    publicPath: 'http://localhost:9001/',
    chunkFilename: isProd ? 'chunks/[id].[chunkhash].min.js' : 'chunks/[id].js',
    assetModuleFilename: isProd ? 'assets/[contenthash][ext]' : 'assets/[name][ext]',
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx'],
  },
  module: {
    rules: [
      {
        test: /\.(jsx?|tsx?)$/,
        exclude: /\/node_modules\//,
        use: [
          {
            loader: 'ts-loader',
            options: {
              configFile: pathTo('tsconfig.json'),
            },
          },
        ],
      },
      {
        test: /\.(svg|png|jpg|jpeg|gif)$/,
        type: 'asset/resource',
      },
      {
        test: /\.(css)$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins,
  devtool: isProd ? 'source-map' : 'cheap-source-map',
  optimization: {
    minimize: isProd,
    minimizer: [
      '...', // The '...' string represents the webpack default TerserPlugin instance
      new CSSMinimizerPlugin(),
    ],
  },
};

export default config;
